import streamlit as st
import pandas as pd
import pickle
import numpy as np

# Load the trained model
model = pickle.load(open('H·ªçc m√°y/diabetes_classifier.pkl', 'rb'))

# Custom CSS for better styling
st.markdown("""
<style>
    .main {
        background-color: #f0f8ff;
        font-family: 'Arial', sans-serif;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 10px 24px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 12px;
    }
    .stButton>button:hover {
        background-color: #45a049;
    }
    .stSlider {
        color: #333;
    }
    .stSelectbox {
        color: #333;
    }
    .sidebar .sidebar-content {
        background-color: #e6f7ff;
    }
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #333;
        color: white;
        text-align: center;
        padding: 10px;
    }
</style>
""", unsafe_allow_html=True)



# Title with icon
st.title('ü©∫ D·ª± ƒëo√°n B·ªánh Ti·ªÉu ƒê∆∞·ªùng')
st.markdown("### Nh·∫≠p th√¥ng tin b·ªánh nh√¢n ƒë·ªÉ d·ª± ƒëo√°n nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng.")

# Organize inputs into sections
st.header('üìä Th√¥ng tin b·ªánh nh√¢n')

# Create input widgets for the 15 features used in training
BMI = st.slider('Ch·ªâ s·ªë BMI', 10.0, 100.0, 25.0)
GenHlth = st.slider('S·ª©c kh·ªèe t·ªïng th·ªÉ (1-5)', 1, 5, 3)
MentHlth = st.slider('S·ª©c kh·ªèe tinh th·∫ßn (s·ªë ng√†y k√©m trong th√°ng)', 0, 30, 0)
PhysHlth = st.slider('S·ª©c kh·ªèe th·ªÉ ch·∫•t (s·ªë ng√†y k√©m trong th√°ng)', 0, 30, 0)
Age = st.slider('Tu·ªïi (1-13, t∆∞∆°ng ·ª©ng v·ªõi nh√≥m tu·ªïi)', 1, 13, 5)
Education = st.slider('Tr√¨nh ƒë·ªô gi√°o d·ª•c (1-6)', 1, 6, 4)
Income = st.slider('Thu nh·∫≠p (1-8)', 1, 8, 5)
HighBP = st.selectbox('Huy·∫øt √°p cao', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
HighChol = st.selectbox('Cholesterol cao', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
Smoker = st.selectbox('H√∫t thu·ªëc', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
Stroke = st.selectbox('ƒê·ªôt qu·ªµ', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
HeartDiseaseorAttack = st.selectbox('B·ªánh tim ho·∫∑c ƒëau tim', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
PhysActivity = st.selectbox('Ho·∫°t ƒë·ªông th·ªÉ ch·∫•t', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
HvyAlcoholConsump = st.selectbox('U·ªëng r∆∞·ª£u n·∫∑ng', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')
DiffWalk = st.selectbox('Kh√≥ ƒëi b·ªô', [0, 1], format_func=lambda x: 'Kh√¥ng' if x == 0 else 'C√≥')

# Prediction button
st.markdown("---")
if st.button('üîç D·ª± ƒëo√°n'):
    # Prepare the input data for the 15 features
    input_data = np.array([[BMI, GenHlth, MentHlth, PhysHlth, Age, Education, Income, HighBP, HighChol, Smoker, Stroke, HeartDiseaseorAttack, PhysActivity, HvyAlcoholConsump, DiffWalk]])

    # Make prediction
    prediction = model.predict(input_data)
    prediction_proba = model.predict_proba(input_data)

    # Display result with better formatting
    st.markdown("### üìã K·∫øt qu·∫£ d·ª± ƒëo√°n")
    if prediction[0] == 0:
        st.success('‚úÖ Kh√¥ng c√≥ nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng.')
    else:
        st.error('‚ö†Ô∏è C√≥ nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng.')

    st.write(f'**X√°c su·∫•t d·ª± ƒëo√°n:** Kh√¥ng ti·ªÉu ƒë∆∞·ªùng: {prediction_proba[0][0]*100:.2f}%, Ti·ªÉu ƒë∆∞·ªùng: {prediction_proba[0][1]*100:.2f}%')


